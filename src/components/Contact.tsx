import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { telegramBot } from '@/services/telegramBot';
import { toast } from 'sonner';
import Icon from "@/components/ui/icon";
import TelegramContactForm from "@/components/TelegramContactForm";
import CustomerOrderForm from "@/components/CustomerOrderForm";
import { useTelegramWebApp } from "@/hooks/useTelegramWebApp";

export default function Contact() {
  const [showOrderForm, setShowOrderForm] = useState(false);
  const [activeTab, setActiveTab] = useState<'contact' | 'company'>('contact');
  
  const handleCallbackRequest = () => {
    setShowOrderForm(true);
  };
  
  const testTelegramBot = async () => {
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –±–æ—Ç–∞
      const botInfo = await telegramBot.getMe();
      console.log('Bot info:', botInfo);
      
      if (botInfo.success) {
        toast.success('–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: ' + botInfo.botInfo?.first_name);
        
        // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
        const updates = await telegramBot.getUpdates();
        if (updates.success && updates.updates?.length) {
          console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:', updates.updates);
          toast.success(`–ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: ${updates.updates.length}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è chat_id`);
          
          // –ü–æ–∫–∞–∑–∞—Ç—å chat_id –≤ –∫–æ–Ω—Å–æ–ª–∏
          updates.updates.forEach((chat: any, index: number) => {
            console.log(`üí¨ –ß–∞—Ç ${index + 1}:`, {
              chatId: chat.chatId,
              —Ç–∏–ø: chat.chatType,
              –Ω–∞–∑–≤–∞–Ω–∏–µ: chat.chatTitle,
              –æ—Ç: chat.from
            });
          });
          
          const chatIds = updates.updates.map((chat: any) => chat.chatId).join(', ');
          toast.info(`Chat IDs: ${chatIds}`);
        } else {
          toast.warning('‚ùó –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞!');
        }
      } else {
        toast.error('‚ùå –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ' + botInfo.error);
      }
    } catch (error) {
      console.error('Test error:', error);
      toast.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ' + (error as Error).message);
    }
  };
  const telegramWebApp = useTelegramWebApp();

  return (
    <section id="contact" className="py-20 bg-white">
      <div className="max-w-[1980px] mx-auto px-4 sm:px-6 lg:px-8">
        <div className="grid lg:grid-cols-2 gap-12 items-center">
          {/* Left side - Form */}
          <div>
            <h2 className="text-4xl font-display font-bold text-gray-900 mb-4 uppercase">
              –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?
            </h2>
            <p className="text-gray-500 mb-8">
              –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∏ –º—ã –ø–æ–¥—Ä–æ–±–Ω–æ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º 1C Fresh
            </p>

            {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram —Ñ–æ—Ä–º—É –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –≤ Telegram, –æ–±—ã—á–Ω—É—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ */}
            {telegramWebApp.isInTelegram ? (
              <TelegramContactForm 
                title=""
                subtitle=""
              />
            ) : (
              <form className="space-y-4">
                <Input 
                  placeholder="–ò–º—è*" 
                  className="bg-white border-gray-200 rounded-full px-6 py-6 text-gray-400"
                />
                <Input 
                  type="tel" 
                  placeholder="–¢–µ–ª–µ—Ñ–æ–Ω*" 
                  className="bg-white border-gray-200 rounded-full px-6 py-6 text-gray-400"
                />
                <Input 
                  type="email" 
                  placeholder="–ü–æ—á—Ç–∞*" 
                  className="bg-white border-gray-200 rounded-full px-6 py-6 text-gray-400"
                />
                <Textarea 
                  placeholder="–í–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 1–°" 
                  rows={6}
                  className="bg-white border-gray-200 rounded-3xl px-6 py-4 text-gray-400 resize-none"
                />
                <Button className="w-full bg-gray-900 hover:bg-gray-800 text-white rounded-full py-6 text-base font-medium">
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
                </Button>
                <p className="text-sm text-gray-400 text-center">
                  –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <span className="underline cursor-pointer">–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</span>
                </p>
              </form>
            )}
          </div>

          {/* Right side - Decorative Gradient */}
          <div className="relative h-[600px] rounded-[60px] overflow-hidden bg-gradient-to-br from-yellow-300 via-orange-400 to-yellow-500">
            {/* Decorative gradient blobs */}
            <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full h-full">
              <div className="absolute top-[10%] right-[15%] w-72 h-72 rounded-full bg-gradient-to-br from-red-400 to-orange-500 opacity-80 blur-2xl"></div>
              <div className="absolute bottom-[15%] left-[20%] w-96 h-96 rounded-full bg-gradient-to-br from-yellow-400 to-orange-400 opacity-70 blur-3xl"></div>
              <div className="absolute top-[40%] right-[25%] w-64 h-64 rounded-full bg-gradient-to-br from-orange-300 to-red-400 opacity-60 blur-2xl"></div>
            </div>
          </div>
        </div>
      </div>
      
      {showOrderForm && (
        <CustomerOrderForm
          serviceType="–ó–∞–∫–∞–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞"
          serviceDetails="–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è"
          onClose={() => setShowOrderForm(false)}
        />
      )}
    </section>
  );
}