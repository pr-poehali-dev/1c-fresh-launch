interface TelegramBotConfig {
  botToken: string;
  chatId?: string;
}

interface SendMessageOptions {
  chatId?: string;
  parseMode?: "HTML" | "Markdown";
  disableWebPagePreview?: boolean;
  disableNotification?: boolean;
}

class TelegramBotService {
  private botToken: string;
  private defaultChatId?: string;
  private baseUrl: string;

  constructor(config: TelegramBotConfig) {
    this.botToken = config.botToken;
    this.defaultChatId = config.chatId;
    this.baseUrl = `https://api.telegram.org/bot${this.botToken}`;
  }

  async sendMessage(
    text: string,
    options: SendMessageOptions = {},
  ): Promise<{ success: boolean; error?: string }> {
    try {
      const chatId = options.chatId || this.defaultChatId;

      if (!chatId) {
        console.error("‚ö†Ô∏è Telegram Bot: Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        throw new Error(
          "Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–∫–∞–∂–∏—Ç–µ chatId –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞.",
        );
      }

      const payload = {
        chat_id: chatId,
        text,
        parse_mode: options.parseMode || "HTML",
        disable_web_page_preview: options.disableWebPagePreview || false,
        disable_notification: options.disableNotification || false,
      };

      const response = await fetch(`${this.baseUrl}/sendMessage`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.description || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
      }

      return { success: true };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      };
    }
  }

  async sendContactForm(data: {
    name: string;
    phone: string;
    message?: string;
    source?: string;
  }): Promise<{ success: boolean; error?: string }> {
    const text = `
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</b>

üë§ <b>–ò–º—è:</b> ${data.name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone}
${data.message ? `üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${data.message}` : ""}
${data.source ? `üìç <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${data.source}` : ""}

üìÖ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString("ru-RU")}
    `.trim();

    return this.sendMessage(text);
  }

  async sendOrderNotification(data: {
    service: string;
    name: string;
    phone: string;
    price?: string;
    message?: string;
  }): Promise<{ success: boolean; error?: string }> {
    const text = `
üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>

üéØ <b>–£—Å–ª—É–≥–∞:</b> ${data.service}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${data.name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone}
${data.price ? `üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${data.price}` : ""}
${data.message ? `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${data.message}` : ""}

üìÖ <b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> ${new Date().toLocaleString("ru-RU")}
    `.trim();

    return this.sendMessage(text);
  }

  async sendQuestionNotification(data: {
    question: string;
    name: string;
    contact: string;
  }): Promise<{ success: boolean; error?: string }> {
    const text = `
‚ùì <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</b>

üë§ <b>–û—Ç:</b> ${data.name}
üìß <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${data.contact}
‚ùì <b>–í–æ–ø—Ä–æ—Å:</b> ${data.question}

üìÖ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString("ru-RU")}
    `.trim();

    return this.sendMessage(text);
  }

  async getMe(): Promise<{ success: boolean; botInfo?: any; error?: string }> {
    try {
      const response = await fetch(`${this.baseUrl}/getMe`);
      const result = await response.json();

      if (!response.ok) {
        throw new Error(
          result.description || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ",
        );
      }

      return { success: true, botInfo: result.result };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
export const telegramBot = new TelegramBotService({
  botToken: "7547487408:AAFQnLgkanxSA0Fe5cXZW6x64YImH_sU-gA",
  // TODO: –£–∫–∞–∂–∏—Ç–µ –≤–∞—à chat_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  // –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å chat_id, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @userinfobot –∏–ª–∏ @raw_data_bot
  chatId: "-1004970200666", // –í—Ä–µ–º–µ–Ω–Ω—ã–π chat_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
});

export default TelegramBotService;
